#include <IRremote.h> // Include the IRremote library

/*buttons*/
const uint16_t BUTTON_A = 0xF807;
const uint16_t BUTTON_B = 0x7887;
const uint16_t BUTTON_C = 0x58A7;
const uint16_t BUTTON_LEFT = 0x10EF;
const uint16_t BUTTON_RIGHT = 0x807F;
const uint16_t BUTTON_CENTER = 0x20DF;

/*Pinds*/
const int RECV_PIN = 21;
const int OUT_LEFT = 19;
const int OUT_RIGHT = 18;

/* Feedbacj Consts */
const int FEEDBACK_INTENSITYS[] = {50, 100, 150};

/*globals*/
int intensitySetting = 0;

/* Initialize the irrecv part of the IRremote  library */
IRrecv irrecv(RECV_PIN);
decode_results results;

void setup(){
  Serial.begin(9600); // Use serial to debug. 
  Serial.println("System On");
  irrecv.enableIRIn(); // Start the receiver
  pinMode(RECV_PIN, INPUT);
  pinMode(OUT_LEFT, OUTPUT);
  pinMode(OUT_RIGHT, OUTPUT);
  analogWrite(OUT_LEFT, 0);
  analogWrite(OUT_RIGHT, 0);
}

void loop() {
  if (irrecv.decode(&results)){
      uint16_t resultCode = (results.value & 0xFFFF);

      /*remote spits out 0xfff if button is being held down*/
      if (resultCode != 0xFFFF){
        /*Handle button result*/
        switch (resultCode){
          case BUTTON_A:
            Serial.println("A");
            intensitySetting = 0;
            break;
          case BUTTON_B:
            Serial.println("B");
            intensitySetting = 1;
            break;
          case BUTTON_C:
            Serial.println("C");
            intensitySetting = 2;
            break;
          case BUTTON_LEFT:
            Serial.println("LEFT");
            analogWrite(OUT_LEFT,FEEDBACK_INTENSITYS[intensitySetting]);
            break;
          case BUTTON_RIGHT:
            Serial.println("LEFT");
            analogWrite(OUT_RIGHT,FEEDBACK_INTENSITYS[intensitySetting]);
            break;
          case BUTTON_CENTER:
            Serial.println("CENTER");
            analogWrite(OUT_LEFT,FEEDBACK_INTENSITYS[intensitySetting]);
            analogWrite(OUT_RIGHT,FEEDBACK_INTENSITYS[intensitySetting]);
            break; 
        }
      }
      
      irrecv.resume(); 
  }else{
    /*turn of motors if no results*/
    analogWrite(OUT_LEFT,0);
    analogWrite(OUT_RIGHT,0);
  }
}

